#!/sbin/openrc-run
# Copyright 2021 Adam Prycki adam.prycki@gmail.com
# Distributed under the terms of the GNU General Public License v2

name="sandboxed rtorrent"
description="sandboxed rtorrent launched inside tmux"
TMUX_NAME=${SVCNAME}

user="${SVCNAME##*.}"
command_user="${user}"
command="/usr/bin/tmux"
command_args="-L ${TMUX_NAME} new-session -d ${firejail} ${firejail_netns} ${rtorrent_binary}"
#command_args="-L ${TMUX_NAME} new-session ${firejail} ${firejail_netns} ${rtorrent_binary}"
#command_background="yes"
#pidfile="/var/run/${SVCNAME}.pid"

extra_started_commands="attach wg nethogs shell"
description_attach="attach to running tmux (requires user password)"
description_wg="show info about wireguard connection (wg show)"
description_nethogs="launch nethogs network monitor in network namespace"
description_shell="spawns shell running in network namespace"

rtorrent_binary="/usr/bin/rtorrent"
firejail="/usr/bin/firejail --profile=/etc/firejail/rtorrent.profile ${firejail_args}"
stop_args="send-keys C-q"
wg_route="0.0.0.0/0 via "


depend() {
        need net localmount
}

start_pre() {
	ebegin "Starting ${SVCNAME}"
	if [ "${SVCNAME}" == "${SVCNAME##*.}" ] ; then
		eerror "failed to start, you need to define user for this service"
		exit 1
		fi
	if ! [ -z "$(pidof rtorrent)" ] ; then
		ebegin "rtorrent running, killall rtorrent"
		killall rtorrent
		fi
	if [ "${TTlockfile}" != "" ] && [ -f ${TTlockfile} ] && [ "$(pgrep -u ${user} rtorrent)" == "" ] ; then
		ebegin "lockfile exists. removing"
		rm -f ${TTlockfile}
		fi
	create_ns
}

stop() {
	uid="$(awk -F ':' "\$1==\"${user}\" {print \$3}" /etc/passwd)"
	tmux -S /tmp/tmux-${uid}/${TMUX_NAME} ${stop_args}
	ebegin "waiting for rtorrent to finish..."
	while [[ -n $(pgrep -u ${user} rtorrent ) ]]; do
		sleep 0.5
		[ -S /tmp/tmux-${uid}/${TMUX_NAME} ] && tmux -S /tmp/tmux-${uid}/${TMUX_NAME} ${stop_args}
		#einfo '.'
		done
	[ -S /tmp/tmux-${uid}/${TMUX_NAME} ] && tmux -S /tmp/tmux-${uid}/${TMUX_NAME} kill-session 2>/dev/null
	
	[ "${use_ns}" == "true" ] && remove_ns
	rm /tmp/tmux-${uid}/${TMUX_NAME}
	rm -rf /etc/netns/${SVCNAME}
	
	einfo "rtorrent stopped"
}

create_ns() {
	[ "${use_ns}" != "true" ] && return 1
	# delete if exists
	[ "$(ip netns list|grep ${SVCNAME})" != "" ] &&\
		ip netns del ${SVCNAME}
	# create namespace
	ip netns add ${SVCNAME}
	# create wg interface in namespace
	ip link add ${wg_dev} type wireguard
	# move wg interface to namespace
	ip link set ${wg_dev} netns ${SVCNAME} 
	# set wireguard configuration
	ip netns exec ${SVCNAME} wg setconf ${wg_dev} ${wg_conf} 
	# set interface IPs
	ip -n ${SVCNAME} address add ${wg_ipv4} dev ${wg_dev}
	ip -n ${SVCNAME} address add ${wg_ipv6} dev ${wg_dev}
	# raise interface
	ip -n ${SVCNAME} link set ${wg_dev} up
	# add ipv4 route
	ip -n ${SVCNAME} route add default dev ${wg_dev}
	# add ipv6 route
	ip -6 -n ${SVCNAME} route add default dev ${wg_dev}
	if [ "${wg_testIP}" == "true" ] ;then
		hostIP4="$(curl -s -4 icanhazip.com)"
		hostIP6="$(curl -s -6 icanhazip.com)"
		wgIP4="$(ip netns exec ${SVCNAME} curl -s -4 icanhazip.com)"
		wgIP6="$(ip netns exec ${SVCNAME} curl -s -6 icanhazip.com)"
		einfo "checking public IPs"
		einfo "hostIP4	${hostIP4}" 
		einfo "hostIP6	${hostIP6}" 
		einfo "wgIP4		${wgIP4}" 
		einfo "wgIP6		${wgIP6}" 
		if [ "$hostIP4" == "$wgIP4" ]||[ "$hostIP6" == "$wgIP6" ] ;then
			eerror 1 "your VPN doesn't work!"
			ewarn "check your config"
			ewarn "shutting down rtorrent"
			remove_ns
			exit 1
		fi
			
	fi
	einfo "setting netns dns to ${wg_dns}"
	mkdir -p /etc/netns/${SVCNAME}
	echo "nameserver ${wg_dns}" > /etc/netns/${SVCNAME}/resolv.conf 
	#enable namespace in firejail
	firejail_netns="--netns=${SVCNAME}"
	command_args="-L ${TMUX_NAME} new-session -d ${firejail} ${firejail_netns} ${rtorrent_binary}"
	}

remove_ns() {
	# exit if namespace doesn't exist
	[ "$(ip netns list|grep ${SVCNAME})" == "" ] && return 0
	# down interface
	ip -n ${SVCNAME} link set ${wg_dev} down
	# remove interface
	ip -n ${SVCNAME} link delete ${wg_dev} type wireguard
	# remove namespace
	ip netns del ${SVCNAME}
	eend $? "namespace ${SVCNAME} removed"
}

attach(){
	uid="$(awk -F ':' "\$1==\"${user}\" {print \$3}" /etc/passwd)"
	tmux -S /tmp/tmux-${uid}/${TMUX_NAME} attach
	#su ${command_user} -c "tmux -S ${SVCNAME} attach"
	}
wg(){
	ip netns exec ${SVCNAME} wg show
	}

nethogs(){
	ip netns exec ${SVCNAME} nethogs
	}

shell(){
	echo "this command opens shell in wireguard namespace"
	echo "ip netns exec ${SVCNAME} su -l $user"
	}
